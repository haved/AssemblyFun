;This is a comment in Hassembly
Registers r0 to r15.
StackPointer (sp):r13
LinkRegister (lr):r14
ProgramCounter (pc):r15

Immediate values are defined like this:
    #1280
    #0xFF
    #0b10001000
    Example:
    mov r0, #0xFF; Stores the value 255 (0xFF) in the register r0; In C: r0=0xFF;

Giving nicknames to registers:
    r0 .req myName ;Assign myName to mean r0
    mov myName, r1
    .unreq myName ;myName no longer means r0
    pop {pc}

Labels (in this case start) are defined like this:
    start: ;A label points to the line coming after it. If none, it points to the empty line at the end.
    b start ; Go to start

Words are defined like this. Each word is 32 bits. Be careful that they don't load as instructions:
    .word 0xFFABCD00
    .word 125464
    .word 0b100100110000111100001111

Flexible second operand / FSO:   The FSO is Flexible and can take on many different forms:
    Immediate value: #1280; A byte rotated right by an even number of places
    Register: r5; The value of a register
    Register shifted by value: r5, lsl #6; lsl = Logical shift left; The shift(i.t.c. #6) is 5 bits; range(0,31) ; When shifting the same restrictions apply to the shift as Rn and #sh in the lsl and lsr instructions.
    Register shifted by register: r3, lsr r2; lsr = Logical shift right. (lsl and lsr are the only shifts supported) The least significant byte of r2 is used; r3>>(r2&0xFF)
    Examples using add, mov:
    add r0, r1, r2;             r0=r1+r2;
    add r0, r1, #10;            r0=r1+10;
    add r0, r1, #0xFF           r0=r1+255;
    add r0, r1, r2, lsl #5      r0=r1+(r2<<5);
    add r0, #6                  r0+=6;
    mov r3, r3, lsl #4          r3=(r3<<4); r3<<=4; r3*=2^4;

Rd = destination register
Rm = input register
FSO = Flexible second operand
Mnemonics:
    mov Rd, FSO; Copies the value of FSO into Rd;         Example: mov r0,r1; Is in C: r0=r1;
    mov Rd, #imm16; Copies the 16 bit unsigned integer into Rd;         Example: mov r0,#0xFAAF; Is in C: r0=0xFAAF;
    mvn Rd, FSO; Does that same as mov preforms a bitwise logical NOT on the result put in Rd. Example mvn r0,0xFF00FF00; r0=0x00FF00FF

    add/ ; Addition
    sub/ ; Subtraction
    rsb/ ; Reverse subtraction
            ___ {Rd,} Rn, FSO; Stores the value of Rm "operator" FSO in Rd (Or Rn if Rd is omitted);

    mul {Rd,} Rn, Multiplies the values from Rn and Rm and stores the 32 least significant bits in Rd (Or Rn if Rd is omitted)
    mla Rd, Rn, Rm, Ra Multiplies the values from Rn and Rm, adds the value of Ra and stores the sum in Rd
    mls Rd, Rn, Rm, Ra Multiplies the values from Rn and Rm, subtracts the value of Ra and stores the difference in Rd

    sdiv/; Signed Division
    and/ ; Bitwise and
    orr/ ; Bitwise or
    mod  ; Modulo

    lsl/ ; Logical shift left
    lsr  ; Logical shift right
            ___ Rd, Rn, Rm; Shifts the value of Rn by the least significant byte of Rm. Stores it in Rd;
            ___ Rd, Rn, #sh; Shifts the value of Rn by #sh. #sh is 5 bits; range(0,31)

    b
